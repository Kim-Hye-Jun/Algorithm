배낭 문제이다.

M이 1천만 이기 때문에
메모리에 관해서 dp배열을 만들 수 없었다.
즉, 메모리가 X일때의 비용의 최솟값을 구할 수 없었다.

따라서 비용이 X일때 메모리의 최댓값을 구했다.
비용은 100이하 이고 앱의 개수도 100개라서
dp배열을 1만으로 만들 수가 있었다.

그래서 앱1번부터 N번까지 순서대로
해당 앱을 비활성 시키면(가방에 담으면)
dp를 업데이트 시키는 식으로 풀었다.
N*(N*cost)의 시간이 걸려서 
N<=100, cost<=100
<=100만 이기때문에 시간내에 가능하다.
