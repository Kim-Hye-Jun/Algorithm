#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>

using namespace std;
#define INF 50000000
void input();
int N,M;
long long dist[501];
vector<vector<pair<int,int>>> city;

int main()
{
  input();  
}

void input()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M;
  int a,b,c;
  
  
  city.resize(N+1);

  for(int i=0;i<M;i++)
  {
    cin >> a >> b >> c;
    city[a].push_back(make_pair(b,c));
    // b로 가는 버스 c시간이 걸린다
  }

  fill(dist,dist+N+1,INF);
  dist[1]=0;
  bool minusCycle = false;

  for(int i=0;i<N;i++)
  {
    for(int j=1;j<=N;j++)
    {
      for(auto w:city[j])
      {
        int next = w.first;
        int d = w.second;

        if(dist[j]!=INF&&dist[next]>dist[j]+d)
        {
          dist[next] = dist[j] + d;
          if(i==N-1)
            minusCycle = true;
        }
      }
    }
  }

  if(minusCycle==true)
    cout << -1;
  else
  {  
    for(int i=2;i<=N;i++)
    {
      if(dist[i]==INF)
        cout << -1 << "\n";
      else
        cout << dist[i] << "\n";
    }
  }

}