#include <iostream>
#include <cstring>
#include <vector>
#include <stack>

using namespace std;

void solve();
int DFS(int N);

int nxt[100001];
bool complete[100001];
int visit[100001];
stack <int> S;
vector <vector<int>> SCC;
int cnt;

int main() {
  solve();
}

void solve()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int T,N;
  cin >> T;
  for(int i=0;i<T;i++)
  {
    cin >> N;
    memset(visit,0,sizeof(visit));
    memset(complete,false,sizeof(complete));
    memset(nxt,0,sizeof(0));
    cnt=0;
    SCC.clear();
    for(int j=1;j<=N;j++)
    {
      cin >> nxt[j];
    }

    for(int j=1;j<=N;j++)
    {
      if(!visit[j])
        DFS(j);
    }
    int count = 0;
    for(auto w:SCC)
    {
      count+=w.size();
      w.clear();
    }
    cout << N-count<<"\n";
  }

}


int DFS(int N)
{
  
  visit[N] = ++cnt;
  S.push(N);
  int parent = visit[N];
  
  if(!visit[nxt[N]])
    parent = min(parent,DFS(nxt[N]));
  else if(!complete[nxt[N]])
    parent = min(parent,visit[nxt[N]]);
  
  
  if(parent == visit[N])
  {
    vector<int> scc;
    while(1)
    {
      int f = S.top();
      S.pop();

      scc.push_back(f);
      complete[f] = true;
      if(f==N) break;
    }
    
    if(scc.size()>1)
      SCC.push_back(scc);
    else if(scc.size()==1 && nxt[scc[0]]==scc[0])
      SCC.push_back(scc);
  }

  return parent;
}