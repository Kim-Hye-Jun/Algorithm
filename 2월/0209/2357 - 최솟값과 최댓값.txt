#include <iostream>
using namespace std;
#define MAX 1000000000
#define MIN 1
int N,M;
int tree_min[400005];
int tree_max[400005];
int arr[100001];
int init_min(int start, int end, int node);
int init_max(int start, int end, int node);
int q_min(int start,int end, int node,int left, int right);
int q_max(int start,int end, int node,int left, int right);

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M;
  for(int i=0;i<N;i++)
  {
    cin >> arr[i];
  }
  init_min(0,N-1,1);
  init_max(0,N-1,1);
  int a,b;
  
  for(int i=0;i<M;i++)
  {
    cin >> a >> b;
    cout << q_min(0,N-1,1,a-1,b-1) << " ";
    cout << q_max(0,N-1,1,a-1,b-1) << "\n";
  }
}

int init_min(int start, int end, int node)
{
  if(start == end) 
    return tree_min[node] = arr[start];
  int mid = (start + end) / 2;
  return tree_min[node] = min(init_min(start,mid,node*2),init_min(mid+1,end,node*2+1));
}


int init_max(int start, int end, int node)
{
  if(start == end) 
    return tree_max[node] = arr[start];
  int mid = (start + end) / 2;
  return tree_max[node] = max(init_max(start,mid,node*2),init_max(mid+1,end,node*2+1));
}

int q_min(int start,int end, int node,int left, int right)
{
  if(left>end || right<start) return MAX;
  if(left<=start && end<=right) return tree_min[node];

  int mid = (start + end) / 2;
  return min(q_min(start,mid,node*2,left,right),q_min(mid+1,end,node*2+1,left,right));

}

int q_max(int start,int end, int node,int left, int right)
{
  if(left>end || right<start) return MIN;
  if(left<=start && end<=right) return tree_max[node];

  int mid = (start + end) / 2;
  return max(q_max(start,mid,node*2,left,right),q_max(mid+1,end,node*2+1,left,right));

}