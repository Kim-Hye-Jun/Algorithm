#include <iostream>
#include <vector>

using namespace std;

int Left[22][22];
int Right[22][22];

vector <int> X1;
vector <int> Y1;
vector <int> X2;
vector <int> Y2;

vector <int> adj[22];
vector <int> aMatch,bMatch;

int N,maxL,maxR,visitCnt=0;
int Chess[11][11];
int visit[22];

void input();
void fillLeft();
void fillRight();
bool dfs(int a);
int bipartiteMatch();

int main() {
  input();
  cout << bipartiteMatch();
}

void input()
{
  cin >> N;

  for(int i=1;i<=N;i++)
  {
    X1.push_back(i);
    Y1.push_back(1);
    X2.push_back(N+1-i);
    Y2.push_back(1);
  }

  for(int i=2;i<=N;i++)
  {
    X1.push_back(N);
    Y1.push_back(i);
    X2.push_back(1);
    Y2.push_back(i);
  }

  fillLeft();
  fillRight();

  for(int i=1;i<=N;i++)
  {
    for(int j=1;j<=N;j++)
    {
      cin >> Chess[i][j];

      if(Chess[i][j]==1)
      {
        adj[Left[i][j]].push_back(Right[i][j]);

        maxL = max(maxL,Left[i][j]);
        maxR = max(maxR,Right[i][j]);
      }
    }
  }
}

void fillLeft()
{
  int cnt = 1;
  for(int i=0;i<2*N-1;i++)
  {
    int y = Y1[i];
    int x = X1[i];

    while(x>=1)
    {
      Left[y++][x--]=cnt;
    }
    cnt++;
  }
}

void fillRight()
{
  int cnt = 1;
  for(int i=0;i<2*N-1;i++)
  {
    int y = Y2[i];
    int x = X2[i];

    while(x<=N)
    {
      Right[y++][x++]=cnt;
    }

    cnt++;
  }
}

bool dfs(int a)
{
  if(visit[a]==visitCnt)
    return false;
  
  visit[a] = visitCnt;

  for(int next = 0; next < adj[a].size();next++)
  {
    int b = adj[a][next];
    if(bMatch[b]==-1 || dfs(bMatch[b]))
    {
      aMatch[a] = b;
      bMatch[b] = a;

      return true;
    }
  }
  return false;
}

int bipartiteMatch()
{
  aMatch = vector<int>(maxL+1,-1);
  bMatch = vector<int>(maxR+1,-1);

  int ret = 0;
  
  for(int a = 1; a<=maxL;a++)
  {
    visitCnt++;
    ret += dfs(a);
  }

  return ret;
}