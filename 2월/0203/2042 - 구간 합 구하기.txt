#include <iostream>
using namespace std;

int N,M,K;
long long arr[1000001];
long long tree[4000001];


long long init(long long start, long long end, int node)
{
  if(start == end) return tree[node] = arr[start];

  long long mid = (start+end)/2;

  return tree[node] = init(start,mid,node*2) + init(mid+1,end,node*2+1);
}


long long sum(int start,int end,int node,int left, int right)
{
  if(left>end || right<start) return 0;
  if(left<=start && end<=right) return tree[node];

  int mid = (start+end)/2;
  return sum(start,mid,node*2,left,right) + sum(mid+1,end,node*2+1,left,right);
}

void update(int start,int end,int node, int index, long long dif)
{
  if(index<start || index>end) return;
  tree[node] += dif;
  int mid = (start+end)/2;

  if(start==end) return;
  update(start,mid,node*2,index,dif);
  update(mid+1,end,node*2+1,index,dif);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M >> K;
  for(int i=0;i<N;i++)
  {
    cin >> arr[i];
  }

  int a;
  long long b,c;
  init(0,N-1,1);
  for(int i=0;i<M+K;i++)
  {
    cin >> a >> b >> c;
    if(a==1)
    {
      update(0,N-1,1,b-1,c-arr[b-1]);
      arr[b-1]=c;
    }
    else // a=2
    {
      cout << sum(0,N-1,1,b-1,c-1) << "\n";        
    }
  }
}
