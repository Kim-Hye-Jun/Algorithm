#include <iostream>
#include <cstring>
#include <vector>
#include <cmath>
using namespace std;

vector <int> N,P;
void input();
void solve();
int BinarySearch(int value);
int n;
int ans[2];
int main() {

  input();
  solve();
  cout << min(ans[0],ans[1]) << " " << max(ans[0],ans[1]);
  
}

void input()
{
  ios_base :: sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> n;
  int a;

  for(int i=0;i<n;i++)
  {
    cin >> a;
    if(a>0)
      P.push_back(a);
    else
      N.push_back(a);  
  }

}

void solve()
{
  int ret = 2000000000;

  if(P.size()>=2)
  {
    if(ret > P[0] + P[1])
    {
      ret = P[0] + P[1];
      ans[0]=P[0];
      ans[1]=P[1];
    }
  }

  if(N.size()>=2)
  {
    if(ret > abs(N[N.size()-1]+N[N.size()-2]))
    {
      ret = abs(N[N.size()-1]+N[N.size()-2]);
      ans[0] = N[N.size()-1];
      ans[1] = N[N.size()-2];
    }
  }
  
  if(N.size()==0||P.size()==0)
    return;
    
  
  for(int i=0;i<N.size();i++)
  {
    int val = -N[i];
    int idx = BinarySearch(val);

    if(ret>abs(N[i]+P[idx]))
    {
      ret = abs(N[i]+P[idx]);
      ans[0] = N[i];
      ans[1] = P[idx];
    }
    if(idx+1<=P.size()-1)
    {
      if(ret>abs(N[i]+P[idx+1]))
      {
        ret = abs(N[i]+P[idx+1]);
        ans[0] = N[i];
        ans[1] = P[idx+1];
      }
    }
  }  
  return;
}

int BinarySearch(int value)
{
  int mid;
  int start = 0;
  int end = P.size()-1;

  while(start+1<end)
  {
    mid = (start+end)/2;
    if(P[mid]>value)
      end = mid;
    else
      start = mid;
  }

  return start;
}

// 같거나 작은것 중에 가장 큰값