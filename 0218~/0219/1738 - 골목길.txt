#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;
#define INF -50000000
void input();
int N,M;
long long dist[501];
int timeMachine[501];
vector<vector<pair<int,int>>> city;

int main()
{
  input();  
}

void input()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> N >> M;
  int a,b,c;
  
  vector<vector<int>> rev;
  city.resize(N+1);
  rev.resize(N+1);
  bool visit[N+1];


  for(int i=0;i<M;i++)
  {
    cin >> a >> b >> c;
    city[a].push_back(make_pair(b,c));
    rev[b].push_back(a);
    // b로 가는 버스 c시간이 걸린다
  }

  queue<int> q;
  q.push(N);
  visit[N]=true;

  while(!q.empty())
  {
    int k = q.front();
    q.pop();

    for(auto w: rev[k])
    {
      if(visit[w]==false)
      {
        visit[w]=true;
        q.push(w);
      }
    }
  }
  fill(dist,dist+N+1,INF);
  dist[1]=0;
  bool Cycle=false;
  for(int i=0;i<N;i++)
  {
    for(int j=1;j<=N;j++)
    {
      for(auto w:city[j])
      {
        int next = w.first;
        int d = w.second;

        if(dist[j]!=INF&&dist[next]<dist[j]+d)
        {
          dist[next] = dist[j] + d;
          timeMachine[next] = j;
          if(i==N-1 && visit[next]==true)
          {
            Cycle = true;
          }
        }
      }
    }
  }

  if(Cycle==true)
    cout << -1;
  else
  {
    int k=N;
    if(dist[N]!=INF)
    {
      vector<int>ret;
      while(k!=1)
      {
        ret.push_back(timeMachine[k]);
        k = timeMachine[k];
      }

      for(vector<int> :: reverse_iterator it = ret.rbegin();
      it!=ret.rend() ;it++)
      {
        cout << *it << " " ;
      }
      cout << N;
    }
    else
      cout << -1;
  }

}